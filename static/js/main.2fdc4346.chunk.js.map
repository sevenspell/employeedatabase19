{"version":3,"sources":["components/Header/Header.js","components/Wrapper/Wrapper.js","components/SearchForm/SearchForm.js","utils/API.js","components/EmployeeTable/EmployeeTable.js","components/Table/Table.js","components/Container/Container.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","id","Wrapper","props","children","SearchForm","onChange","letter","handleInputChange","value","name","type","placeholder","axios","get","EmployeeTable","alt","first","last","src","medium","phone","email","dob","date","split","Table","scope","data-key","onClick","sortBy","employees","map","key","login","uuid","picture","cell","Container","state","filteredEmployees","search","currentSort","event","setState","target","handleFilter","filter","employee","toLowerCase","includes","employeesCopy","sort","sortUp","getAttribute","sortDown","API","then","res","data","results","catch","err","console","log","a","b","afullName","bfullName","aDOB","bDOB","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2fdc4346.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.css\"\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid\" id=\"headerWrapper\">\r\n            <div className=\"container\">\r\n                <h1 className=\"display-4\">The Employee Directory</h1>\r\n                <p className=\"lead\">Find your people.</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nfunction Wrapper(props) {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            {props.children}>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Wrapper;","import React from 'react';\r\nimport './SearchForm.css'\r\n\r\nfunction SearchForm(props) {\r\n    return (\r\n\r\n        <div className=\"container\" id=\"searchContainer\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-1 offset-md-4\">\r\n                    <label className=\"label\">Search:</label>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <form>\r\n                        <div className=\"form-group\">\r\n                            <input\r\n                                className=\"form-control\"\r\n                                onChange={(letter) => props.handleInputChange(letter)}\r\n                                value={props.value}\r\n                                name=\"search\"\r\n                                type=\"text\"\r\n                                placeholder=\"enter search words\"\r\n                                id=\"search\"\r\n                            />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default SearchForm;","import axios from \"axios\";\r\nconst BASEURL = \"https://randomuser.me/api/?results=200&nat=au,gb\";\r\n\r\nexport default {\r\n  searchAll: function() {\r\n    return axios.get(BASEURL);\r\n  }\r\n};","import React from 'react';\r\n\r\n\r\nfunction EmployeeTable(props) {\r\n\r\n    return (\r\n        <tbody>\r\n            <tr className=\"w-auto\" id={props.id}>\r\n                <td><img alt={props.name.first + props.name.last} src={props.src.medium} /></td>\r\n                <td>{props.name.first} {props.name.last}</td>\r\n                <td>{props.phone}</td>\r\n                <td>{props.email}</td>\r\n                <td>{props.dob.date.split('T', 1)[0]}</td>\r\n            </tr>\r\n        </tbody>\r\n    )\r\n}\r\n\r\nexport default EmployeeTable;","import React from 'react';\r\nimport './Table.css';\r\nimport EmployeeTable from '../EmployeeTable/EmployeeTable';\r\n\r\n\r\nfunction Table(props) {\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"table-responsive-sm tableWrapper\" id=\"tableWrapper\">\r\n            <table className=\"table table-bordered table-hover table-sm\" id=\"tableSort\">\r\n                <thead>\r\n                    <tr className=\"w-auto table-danger\" id=\"tableTitleWrapper\">\r\n                        <th scope=\"col\">Image</th>\r\n                        <th scope=\"col\" data-key=\"name\"\r\n                        onClick= {props.sortBy}\r\n                        >Name</th>\r\n                        <th scope=\"col\" data-key=\"cell\"\r\n                        onClick= {props.sortBy}\r\n                        >Phone</th>\r\n                        <th scope=\"col\" data-key=\"email\"\r\n                        onClick= {props.sortBy}\r\n                        >Email</th>\r\n                        <th scope=\"col\" data-key=\"dob\"\r\n                        onClick= {props.sortBy}\r\n                        >DOB</th>\r\n                    </tr>\r\n                </thead>\r\n                {props.employees.map(employees => (\r\n                    <EmployeeTable\r\n                        key={employees.login.uuid}\r\n                        id={employees.login.uuid}\r\n                        src={employees.picture}\r\n                        name={employees.name}\r\n                        email={employees.email}\r\n                        phone={employees.cell}\r\n                        dob={employees.dob}\r\n                    />\r\n                ))}\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table;","import React, { Component } from 'react';\r\nimport Header from '../Header/Header';\r\nimport Wrapper from '../Wrapper/Wrapper';\r\nimport SearchForm from '../SearchForm/SearchForm';\r\nimport API from '../../utils/API'\r\nimport Table from '../Table/Table';\r\n\r\nclass Container extends Component {\r\n\r\n    state = {\r\n        employees: [],\r\n        filteredEmployees: [],\r\n        search: \"\",\r\n        currentSort: 'down'\r\n    };\r\n\r\n    componentDidMount() {\r\n        API.searchAll()\r\n            .then(res => this.setState({\r\n                employees: res.data.results,\r\n                filteredEmployees: res.data.results,\r\n\r\n            }))\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    handleInputChange = event => {\r\n        this.setState({ search: event.target.value }, () => this.handleFilter());\r\n    }\r\n\r\n\r\n    handleFilter = () => {\r\n        let filteredEmployees = this.state.employees.filter((employee) => {\r\n            let fullName = (employee.name.first + \" \" + employee.name.last).toLowerCase();\r\n            return (fullName.includes(this.state.search));\r\n        })\r\n        this.setState({ filteredEmployees: filteredEmployees })\r\n    }\r\n\r\n    sortUp(key) {\r\n\r\n        if (key === 'name') {\r\n            return function (a, b) {\r\n                let afullName = a.name.first + ' ' + a.name.last;\r\n                let bfullName = b.name.first + ' ' + b.name.last;\r\n                if (afullName < bfullName) return -1;\r\n                if (afullName > bfullName) return 1;\r\n                return 0;\r\n            };\r\n        }\r\n\r\n        if (key === 'dob') {\r\n            return function (a, b) {\r\n                let aDOB = a.dob.date;\r\n                let bDOB = b.dob.date;\r\n                if (aDOB < bDOB) return -1;\r\n                if (aDOB > bDOB) return 1;\r\n                return 0;\r\n            };\r\n        }\r\n\r\n        return function (a, b) {\r\n            if (a[key] < b[key]) return -1;\r\n            if (a[key] > b[key]) return 1;\r\n            return 0;\r\n        };\r\n    }\r\n\r\n    sortDown(key) {\r\n\r\n        if (key === 'name') {\r\n            return function (a, b) {\r\n                let afullName = a.name.first + ' ' + a.name.last;\r\n                let bfullName = b.name.first + ' ' + b.name.last;\r\n                if (afullName > bfullName) return -1;\r\n                if (afullName < bfullName) return 1;\r\n                return 0;\r\n            };\r\n        }\r\n\r\n        if (key === 'dob') {\r\n            return function (a, b) {\r\n                let aDOB = a.dob.date;\r\n                let bDOB = b.dob.date;\r\n                if (aDOB > bDOB) return -1;\r\n                if (aDOB < bDOB) return 1;\r\n                return 0;\r\n            };\r\n        }\r\n\r\n        return function (a, b) {\r\n            if (a[key] > b[key]) return -1;\r\n            if (a[key] < b[key]) return 1;\r\n            return 0;\r\n        };\r\n    }\r\n\r\n    sortBy = event => {\r\n        const currentSort = this.state.currentSort;\r\n\r\n        if (currentSort === 'down') {\r\n            let employeesCopy = [...this.state.filteredEmployees];\r\n            employeesCopy.sort(this.sortUp(event.target.getAttribute('data-key')));\r\n            this.setState({ filteredEmployees: employeesCopy });\r\n            this.setState({ currentSort: 'up' })\r\n\r\n        } else if (currentSort === 'up') {\r\n            let employeesCopy = [...this.state.filteredEmployees];\r\n            employeesCopy.sort(this.sortDown(event.target.getAttribute('data-key')));\r\n            this.setState({ filteredEmployees: employeesCopy });\r\n            this.setState({ currentSort: 'down' })\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Wrapper>\r\n                <Header />\r\n                <SearchForm\r\n                    value={this.state.search}\r\n                    handleInputChange={this.handleInputChange}\r\n                />\r\n                <Table\r\n                    employees={this.state.filteredEmployees}\r\n                    sortBy={this.sortBy}\r\n                />\r\n            </Wrapper>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Container;\r\n\r\n","import React from 'react';\nimport Container from './components/Container/Container';\nimport './App.css'\n\n\nconst App = () => \n<Container />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}